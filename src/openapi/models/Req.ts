/* tslint:disable */
/* eslint-disable */
/**
 * azuki-api
 * github.com/sylms/azuki api document
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 検索対象とする科目の情報を指定
 * @export
 * @interface Req
 */
export interface Req {
    /**
     * 科目番号を指定
     * アンダースコアで任意の1文字に代替可能
     * 空白区切りで単語分割
     * @type {string}
     * @memberof Req
     */
    courseNumber?: string;
    /**
     * 科目名を指定
     * アンダースコアで任意の1文字に代替可能
     * 空白区切りで単語分割
     * @type {string}
     * @memberof Req
     */
    courseName?: string;
    /**
     * 開講時期を指定
     * アンダースコアで任意の1文字に代替可能
     * 空白区切りで単語分割
     * @type {string}
     * @memberof Req
     */
    term?: string;
    /**
     * 開講曜日時間を指定
     * アンダースコアで任意の1文字に代替可能
     * 空白区切りで単語分割
     * @type {string}
     * @memberof Req
     */
    period?: string;
    /**
     * 科目概要を指定
     * アンダースコアで任意の1文字に代替可能
     * 空白区切りで単語分割
     * @type {string}
     * @memberof Req
     */
    courseOverview?: string;
    /**
     * `course_name` の各単語をどのように繋げて検索するか。`course_name` を設定しているときにはこのパラメーターも必須である。
     * @type {string}
     * @memberof Req
     */
    courseNameFilterType?: ReqCourseNameFilterTypeEnum;
    /**
     * `course_overview` の各単語をどのように繋げて検索するか。`course_overview` を設定しているときにはこのパラメーターも必須である。
     * @type {string}
     * @memberof Req
     */
    courseOverviewFilterType?: ReqCourseOverviewFilterTypeEnum;
    /**
     * 各要素のどのように繋げて検索するか。現在は、何と指定しようが、AND で結ばれて検索される。
     * @type {string}
     * @memberof Req
     */
    filterType?: ReqFilterTypeEnum;
    /**
     * 取得する最大件数
     * @type {number}
     * @memberof Req
     */
    limit?: number;
    /**
     * スキップする件数
     * @type {number}
     * @memberof Req
     */
    offset?: number;
}

/**
* @export
* @enum {string}
*/
export enum ReqCourseNameFilterTypeEnum {
    And = 'and',
    Or = 'or'
}/**
* @export
* @enum {string}
*/
export enum ReqCourseOverviewFilterTypeEnum {
    And = 'and',
    Or = 'or'
}/**
* @export
* @enum {string}
*/
export enum ReqFilterTypeEnum {
    And = 'and',
    Or = 'or'
}

export function ReqFromJSON(json: any): Req {
    return ReqFromJSONTyped(json, false);
}

export function ReqFromJSONTyped(json: any, ignoreDiscriminator: boolean): Req {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'courseNumber': !exists(json, 'course_number') ? undefined : json['course_number'],
        'courseName': !exists(json, 'course_name') ? undefined : json['course_name'],
        'term': !exists(json, 'term') ? undefined : json['term'],
        'period': !exists(json, 'period') ? undefined : json['period'],
        'courseOverview': !exists(json, 'course_overview') ? undefined : json['course_overview'],
        'courseNameFilterType': !exists(json, 'course_name_filter_type') ? undefined : json['course_name_filter_type'],
        'courseOverviewFilterType': !exists(json, 'course_overview_filter_type') ? undefined : json['course_overview_filter_type'],
        'filterType': !exists(json, 'filter_type') ? undefined : json['filter_type'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
    };
}

export function ReqToJSON(value?: Req | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'course_number': value.courseNumber,
        'course_name': value.courseName,
        'term': value.term,
        'period': value.period,
        'course_overview': value.courseOverview,
        'course_name_filter_type': value.courseNameFilterType,
        'course_overview_filter_type': value.courseOverviewFilterType,
        'filter_type': value.filterType,
        'limit': value.limit,
        'offset': value.offset,
    };
}

