/* tslint:disable */
/* eslint-disable */
/**
 * azuki-api
 * github.com/sylms/azuki api document
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Course,
    CourseFromJSON,
    CourseToJSON,
} from '../models';

export interface GetCourseRequest {
    courseName?: string;
    courseOverview?: string;
    courseNameFilterType?: GetCourseCourseNameFilterTypeEnum;
    courseOverviewFilterType?: GetCourseCourseOverviewFilterTypeEnum;
    filterType?: GetCourseFilterTypeEnum;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class CourseApi extends runtime.BaseAPI {

    /**
     * 科目を検索します。  例えば、`course_name` に「情報」と指定した場合、科目名に「情報」を含む科目の情報を返します。 `course_name` と `course_overview` のどちらかはクエリにつける必要があります。 
     * /course
     */
    async getCourseRaw(requestParameters: GetCourseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Course>>> {
        const queryParameters: any = {};

        if (requestParameters.courseName !== undefined) {
            queryParameters['course_name'] = requestParameters.courseName;
        }

        if (requestParameters.courseOverview !== undefined) {
            queryParameters['course_overview'] = requestParameters.courseOverview;
        }

        if (requestParameters.courseNameFilterType !== undefined) {
            queryParameters['course_name_filter_type'] = requestParameters.courseNameFilterType;
        }

        if (requestParameters.courseOverviewFilterType !== undefined) {
            queryParameters['course_overview_filter_type'] = requestParameters.courseOverviewFilterType;
        }

        if (requestParameters.filterType !== undefined) {
            queryParameters['filter_type'] = requestParameters.filterType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/course`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CourseFromJSON));
    }

    /**
     * 科目を検索します。  例えば、`course_name` に「情報」と指定した場合、科目名に「情報」を含む科目の情報を返します。 `course_name` と `course_overview` のどちらかはクエリにつける必要があります。 
     * /course
     */
    async getCourse(requestParameters: GetCourseRequest, initOverrides?: RequestInit): Promise<Array<Course>> {
        const response = await this.getCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetCourseCourseNameFilterTypeEnum {
    And = 'and',
    Or = 'or'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCourseCourseOverviewFilterTypeEnum {
    And = 'and',
    Or = 'or'
}
/**
    * @export
    * @enum {string}
    */
export enum GetCourseFilterTypeEnum {
    And = 'and',
    Or = 'or'
}
